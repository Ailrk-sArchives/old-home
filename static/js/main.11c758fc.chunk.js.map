{"version":3,"sources":["state/markdowns.ts","styles/styleElements.ts","components/Article.tsx","components/Header.tsx","components/List.tsx","components/App.tsx","serviceWorker.js","index.tsx"],"names":["markdownDB","db","indexTag","textTheme","css","display","alignItems","font","fontSize","lineHeight","linkStyle","paddingTop","paddingLeft","textDecoration","color","defaultArticleStyle","marginLeft","marginRight","overflow","ArticlePage","id","useParams","markdown","get","Number","parseInt","Article","props","style","article","content","console","log","Container","width","wordBreak","dangerouslySetInnerHTML","__html","headerStyle","height","paddingRight","marginBottom","Header","Row","xs","Col","to","size","listRowStyle","paddingBottom","ListRow","header","title","tag","time","toJSON","replace","split","map","t","Badge","variant","List","lists","markdowns","m","App","exact","path","component","Array","from","MyMarkdown","values","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.11c758fc.chunk.js","sourcesContent":["import markdowndb, {MarkdownDB} from 'markdowndb.macro';\n\nexport const markdownDB: MarkdownDB = markdowndb('articles');\nexport const {db, indexTag} = markdownDB;\n\nexport type {Markdown, MarkdownDB, MarkdownText, MarkdownHeader} from 'markdowndb.macro';\n","import {css} from 'glamor';\nimport {CSSProperties} from 'react';\n\nexport const centerLabel = css({\n  display: \"flex\",\n  alignItems: \"center\",\n});\n\nexport const textTheme = css({\n  font: \"Lato\",\n  fontSize: \"22px\",\n  lineHeight: 2.1,\n});\n\nexport const leftAlign = css({\n  paddingTop: \"10px\",\n  paddingLeft: \"30px\",\n});\n\nexport const linkStyle: CSSProperties = {\n  textDecoration: 'none',\n  color: 'black',\n};\n","import React from 'react';\nimport {Container} from 'react-bootstrap';\nimport {StyleAttribute, css} from 'glamor';\nimport {Markdown, db} from '../state/markdowns';\nimport {textTheme} from '../styles/styleElements';\nimport {useParams} from 'react-router-dom';\n\nexport const defaultArticleStyle = css(textTheme, {\n  marginLeft: \"250px\",\n  marginRight: \"200px\",\n  paddingLeft: \"101px\",\n  paddingTop: \"30px\",\n  overflow: \"hidden\",\n});\n\nexport function ArticlePage() {\n  const {id} = useParams();\n  const markdown = db.get(Number.parseInt(id as string));\n  return <Article markdown={markdown}/>;\n}\n\n// article compoenent. It insert parsed markown JSX element\n// into card container.\n// the style can be controlled by style parameter.\nexport function Article(props: {\n  markdown?: Markdown,\n  style?: StyleAttribute,\n}) {\n  const {markdown, style} = props;\n  const article = markdown?.content ?? \"Oppsy Doopsy!\";\n  console.log(article);\n  return (\n    <Container {...style ?? defaultArticleStyle}>\n      <div {...css({width: \"90%\", wordBreak: \"break-word\"})}>\n        <div dangerouslySetInnerHTML={{__html: article}} />\n      </div>\n    </Container>\n  );\n}\n","import React from 'react';\nimport {Row, Col, Container} from 'react-bootstrap';\nimport {css} from 'glamor';\nimport {FaBeer, FaBars} from 'react-icons/fa';\nimport {Link} from 'react-router-dom';\nimport {linkStyle} from '../styles/styleElements';\n\nconst headerStyle = css({\n  height: \"100px\",\n  width: \"100%\",\n  paddingTop: \"28px\",\n  paddingRight: \"40px\",\n  paddingLeft: \"20px\",\n  marginBottom: \"130px\",\n});\n\nexport function Header() {\n  return (\n    <Container>\n      <Row {...headerStyle} xs={8}>\n        <Col>\n          <Link to={'/'} style={linkStyle}>\n            <h1>\n              <FaBeer size={45} /> <b>&nbsp; A Bag of Words </b>\n            </h1>\n          </Link>\n        </Col>\n        <Row>\n          <FaBars size={35} />\n        </Row>\n      </Row>\n    <hr />\n    </Container>\n  )\n}\n","import {Markdown} from '../state/markdowns';\nimport {Container, Col, Badge} from 'react-bootstrap';\nimport React from 'react';\nimport {css} from 'glamor';\nimport {textTheme, linkStyle} from '../styles/styleElements';\nimport {Link} from 'react-router-dom';\n\nconst listRowStyle = css(textTheme, {\n  paddingBottom: \"80px\",\n});\n\n\nfunction ListRow(props: {\n  markdown: Markdown\n}) {\n  const {markdown} = props;\n  const {header} = markdown;\n  const {id, title, tag, time} = header;\n\n  return (\n    <Container {...listRowStyle}>\n      <Col style={{paddingBottom: \"12px\"}}>\n        <Link to={`/article/${id}`} style={linkStyle}>\n          <h2><b>{title}</b></h2>\n        </Link>\n      </Col>\n      <Col {...css({fontSize: 20, paddingLeft: \"20px\"})}>\n        {time.toJSON().replace(/-/gi, ' . ').split('T')[0]}\n      </Col>\n      <Col>\n        <h4>\n          {\n            tag?.map(t => (\n              <>\n\n                <Badge variant=\"danger\">{t}</Badge>\n                    &nbsp;\n                </>\n            ))\n          }\n        </h4>\n      </Col>\n    </Container>\n  );\n}\n\nexport function List(props: {\n  markdowns: Array<Markdown>,\n}) {\n  const {markdowns} = props;\n  const lists = markdowns.map(m => <ListRow markdown={m} />);\n  return (\n    <Container>\n      {\n        lists\n      }\n    </Container>\n  );\n}\n\n","import React from 'react';\nimport * as MyMarkdown from '../state/markdowns';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport {ArticlePage} from './Article';\nimport {Header} from './Header';\nimport {List} from './List';\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n      <Header />\n      <Switch>\n        <Route exact path=\"/article/:id\" component={ArticlePage} />\n        <Route exact path=\"/\">\n          <div>\n            <List markdowns={Array.from(MyMarkdown.db.values())} />\n          </div>\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}